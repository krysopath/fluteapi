// Code generated by sqlc. DO NOT EDIT.
// source: flute.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createFlute = `-- name: CreateFlute :one
INSERT INTO flutes (
  description,
  available,
  key,
  name,
  material,
  holes,
  scale,
  pictures
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, description, available, key, name, material, holes, scale, pictures, created_at
`

type CreateFluteParams struct {
	Description string   `json:"description"`
	Available   bool     `json:"available"`
	Key         string   `json:"key"`
	Name        string   `json:"name"`
	Material    string   `json:"material"`
	Holes       int32    `json:"holes"`
	Scale       string   `json:"scale"`
	Pictures    []string `json:"pictures"`
}

func (q *Queries) CreateFlute(ctx context.Context, arg CreateFluteParams) (Flute, error) {
	row := q.db.QueryRowContext(ctx, createFlute,
		arg.Description,
		arg.Available,
		arg.Key,
		arg.Name,
		arg.Material,
		arg.Holes,
		arg.Scale,
		pq.Array(arg.Pictures),
	)
	var i Flute
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Available,
		&i.Key,
		&i.Name,
		&i.Material,
		&i.Holes,
		&i.Scale,
		pq.Array(&i.Pictures),
		&i.CreatedAt,
	)
	return i, err
}

const deleteFlute = `-- name: DeleteFlute :exec
DELETE FROM flutes
WHERE id = $1
`

func (q *Queries) DeleteFlute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFlute, id)
	return err
}

const getFlute = `-- name: GetFlute :one
SELECT id, description, available, key, name, material, holes, scale, pictures, created_at FROM flutes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFlute(ctx context.Context, id int64) (Flute, error) {
	row := q.db.QueryRowContext(ctx, getFlute, id)
	var i Flute
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Available,
		&i.Key,
		&i.Name,
		&i.Material,
		&i.Holes,
		&i.Scale,
		pq.Array(&i.Pictures),
		&i.CreatedAt,
	)
	return i, err
}

const getFluteForUpdate = `-- name: GetFluteForUpdate :one
SELECT id, description, available, key, name, material, holes, scale, pictures, created_at FROM flutes
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetFluteForUpdate(ctx context.Context, id int64) (Flute, error) {
	row := q.db.QueryRowContext(ctx, getFluteForUpdate, id)
	var i Flute
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Available,
		&i.Key,
		&i.Name,
		&i.Material,
		&i.Holes,
		&i.Scale,
		pq.Array(&i.Pictures),
		&i.CreatedAt,
	)
	return i, err
}

const listFlutes = `-- name: ListFlutes :many
SELECT id, description, available, key, name, material, holes, scale, pictures, created_at FROM flutes
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListFlutesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListFlutes(ctx context.Context, arg ListFlutesParams) ([]Flute, error) {
	rows, err := q.db.QueryContext(ctx, listFlutes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flute
	for rows.Next() {
		var i Flute
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Available,
			&i.Key,
			&i.Name,
			&i.Material,
			&i.Holes,
			&i.Scale,
			pq.Array(&i.Pictures),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
